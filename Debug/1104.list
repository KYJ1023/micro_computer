
1104.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002b38  08002b38  00003b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be4  08002be4  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002be4  08002be4  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be4  08002be4  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be4  08002be4  00003be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002be8  08002be8  00003be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002bec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  20000010  08002bfc  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  08002bfc  0000402c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0e8  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002055  00000000  00000000  0000f121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00011178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000834  00000000  00000000  00011c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001786f  00000000  00000000  0001246c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c345  00000000  00000000  00029cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089fa7  00000000  00000000  00036020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bffc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a70  00000000  00000000  000c000c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000c2a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002b20 	.word	0x08002b20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002b20 	.word	0x08002b20

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	@ 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa55 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f84b 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8b5 	bl	80002fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f889 	bl	80002a8 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000196:	4b1d      	ldr	r3, [pc, #116]	@ (800020c <main+0x8c>)
 8000198:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800019c:	461d      	mov	r5, r3
 800019e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 fa93 	bl	80016dc <osThreadCreate>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a15      	ldr	r2, [pc, #84]	@ (8000210 <main+0x90>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 256);
 80001bc:	4b15      	ldr	r3, [pc, #84]	@ (8000214 <main+0x94>)
 80001be:	f107 0420 	add.w	r4, r7, #32
 80001c2:	461d      	mov	r5, r3
 80001c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80001d0:	f107 0320 	add.w	r3, r7, #32
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fa80 	bl	80016dc <osThreadCreate>
 80001dc:	4603      	mov	r3, r0
 80001de:	4a0e      	ldr	r2, [pc, #56]	@ (8000218 <main+0x98>)
 80001e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 256);
 80001e2:	4b0e      	ldr	r3, [pc, #56]	@ (800021c <main+0x9c>)
 80001e4:	1d3c      	adds	r4, r7, #4
 80001e6:	461d      	mov	r5, r3
 80001e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fa6f 	bl	80016dc <osThreadCreate>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a07      	ldr	r2, [pc, #28]	@ (8000220 <main+0xa0>)
 8000202:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000204:	f001 fa63 	bl	80016ce <osKernelStart>

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */

  while (1)
 8000208:	bf00      	nop
 800020a:	e7fd      	b.n	8000208 <main+0x88>
 800020c:	08002b44 	.word	0x08002b44
 8000210:	200002c8 	.word	0x200002c8
 8000214:	08002b6c 	.word	0x08002b6c
 8000218:	200002cc 	.word	0x200002cc
 800021c:	08002b94 	.word	0x08002b94
 8000220:	200002d0 	.word	0x200002d0

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fc48 	bl	8002ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000256:	2300      	movs	r3, #0
 8000258:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800025e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000260:	f107 0318 	add.w	r3, r7, #24
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fd2d 	bl	8000cc4 <HAL_RCC_OscConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000270:	f000 f908 	bl	8000484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000274:	230f      	movs	r3, #15
 8000276:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000278:	2302      	movs	r3, #2
 800027a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2102      	movs	r1, #2
 800028e:	4618      	mov	r0, r3
 8000290:	f000 ff9a 	bl	80011c8 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800029a:	f000 f8f3 	bl	8000484 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	@ 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002ae:	4a12      	ldr	r2, [pc, #72]	@ (80002f8 <MX_USART2_UART_Init+0x50>)
 80002b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002b2:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002e0:	f001 f900 	bl	80014e4 <HAL_UART_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ea:	f000 f8cb 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000280 	.word	0x20000280
 80002f8:	40004400 	.word	0x40004400

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000310:	4b39      	ldr	r3, [pc, #228]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a38      	ldr	r2, [pc, #224]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b36      	ldr	r3, [pc, #216]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0310 	and.w	r3, r3, #16
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000328:	4b33      	ldr	r3, [pc, #204]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a32      	ldr	r2, [pc, #200]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b30      	ldr	r3, [pc, #192]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0320 	and.w	r3, r3, #32
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b2d      	ldr	r3, [pc, #180]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a2c      	ldr	r2, [pc, #176]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2a      	ldr	r3, [pc, #168]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	4b27      	ldr	r3, [pc, #156]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a26      	ldr	r2, [pc, #152]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b24      	ldr	r3, [pc, #144]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0308 	and.w	r3, r3, #8
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 8000376:	4821      	ldr	r0, [pc, #132]	@ (80003fc <MX_GPIO_Init+0x100>)
 8000378:	f000 fc50 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000382:	481f      	ldr	r0, [pc, #124]	@ (8000400 <MX_GPIO_Init+0x104>)
 8000384:	f000 fc4a 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800038e:	4b1d      	ldr	r3, [pc, #116]	@ (8000404 <MX_GPIO_Init+0x108>)
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	481a      	ldr	r0, [pc, #104]	@ (8000408 <MX_GPIO_Init+0x10c>)
 800039e:	f000 fab9 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80003a2:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 80003a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	2302      	movs	r3, #2
 80003b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	4619      	mov	r1, r3
 80003ba:	4810      	ldr	r0, [pc, #64]	@ (80003fc <MX_GPIO_Init+0x100>)
 80003bc:	f000 faaa 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80003c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80003c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	4809      	ldr	r0, [pc, #36]	@ (8000400 <MX_GPIO_Init+0x104>)
 80003da:	f000 fa9b 	bl	8000914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2105      	movs	r1, #5
 80003e2:	2028      	movs	r0, #40	@ 0x28
 80003e4:	f000 fa5f 	bl	80008a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e8:	2028      	movs	r0, #40	@ 0x28
 80003ea:	f000 fa78 	bl	80008de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ee:	bf00      	nop
 80003f0:	3720      	adds	r7, #32
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	40010c00 	.word	0x40010c00
 8000404:	10110000 	.word	0x10110000
 8000408:	40011000 	.word	0x40011000

0800040c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000414:	2001      	movs	r0, #1
 8000416:	f001 f9ad 	bl	8001774 <osDelay>
    HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
 800041a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800041e:	4804      	ldr	r0, [pc, #16]	@ (8000430 <StartDefaultTask+0x24>)
 8000420:	f000 fc14 	bl	8000c4c <HAL_GPIO_TogglePin>
    osDelay(500);
 8000424:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000428:	f001 f9a4 	bl	8001774 <osDelay>
    osDelay(1);
 800042c:	bf00      	nop
 800042e:	e7f1      	b.n	8000414 <StartDefaultTask+0x8>
 8000430:	40010800 	.word	0x40010800

08000434 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800043c:	2001      	movs	r0, #1
 800043e:	f001 f999 	bl	8001774 <osDelay>
    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_11);
 8000442:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000446:	4804      	ldr	r0, [pc, #16]	@ (8000458 <StartTask02+0x24>)
 8000448:	f000 fc00 	bl	8000c4c <HAL_GPIO_TogglePin>
    osDelay(1000);
 800044c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000450:	f001 f990 	bl	8001774 <osDelay>
    osDelay(1);
 8000454:	bf00      	nop
 8000456:	e7f1      	b.n	800043c <StartTask02+0x8>
 8000458:	40010c00 	.word	0x40010c00

0800045c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f001 f985 	bl	8001774 <osDelay>
    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 800046a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <StartTask03+0x24>)
 8000470:	f000 fbec 	bl	8000c4c <HAL_GPIO_TogglePin>
    osDelay(1500);
 8000474:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000478:	f001 f97c 	bl	8001774 <osDelay>
    osDelay(1);
 800047c:	bf00      	nop
 800047e:	e7f1      	b.n	8000464 <StartTask03+0x8>
 8000480:	40010c00 	.word	0x40010c00

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <Error_Handler+0x8>

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000496:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <HAL_MspInit+0x68>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a17      	ldr	r2, [pc, #92]	@ (80004f8 <HAL_MspInit+0x68>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <HAL_MspInit+0x68>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <HAL_MspInit+0x68>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a11      	ldr	r2, [pc, #68]	@ (80004f8 <HAL_MspInit+0x68>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <HAL_MspInit+0x68>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	210f      	movs	r1, #15
 80004ca:	f06f 0001 	mvn.w	r0, #1
 80004ce:	f000 f9ea 	bl	80008a6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <HAL_MspInit+0x6c>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <HAL_MspInit+0x6c>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000

08000500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <HAL_UART_MspInit+0x70>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d123      	bne.n	8000568 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <HAL_UART_MspInit+0x74>)
 8000522:	69db      	ldr	r3, [r3, #28]
 8000524:	4a13      	ldr	r2, [pc, #76]	@ (8000574 <HAL_UART_MspInit+0x74>)
 8000526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800052a:	61d3      	str	r3, [r2, #28]
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <HAL_UART_MspInit+0x74>)
 800052e:	69db      	ldr	r3, [r3, #28]
 8000530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <HAL_UART_MspInit+0x74>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <HAL_UART_MspInit+0x74>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <HAL_UART_MspInit+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000550:	230c      	movs	r3, #12
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000554:	2302      	movs	r3, #2
 8000556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2302      	movs	r3, #2
 800055a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4805      	ldr	r0, [pc, #20]	@ (8000578 <HAL_UART_MspInit+0x78>)
 8000564:	f000 f9d6 	bl	8000914 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40004400 	.word	0x40004400
 8000574:	40021000 	.word	0x40021000
 8000578:	40010800 	.word	0x40010800

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f884 	bl	80006c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005b8:	f001 fe66 	bl	8002288 <xTaskGetSchedulerState>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d001      	beq.n	80005c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005c2:	f002 f851 	bl	8002668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}

080005ca <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80005d2:	f000 fb55 	bl	8000c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}

080005da <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff fff7 	bl	80005da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ee:	490c      	ldr	r1, [pc, #48]	@ (8000620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000604:	4c09      	ldr	r4, [pc, #36]	@ (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f002 fa61 	bl	8002ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fdb3 	bl	8000180 <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000624:	08002bec 	.word	0x08002bec
  ldr r2, =_sbss
 8000628:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800062c:	2000102c 	.word	0x2000102c

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f923 	bl	8000890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	200f      	movs	r0, #15
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff ff1e 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_InitTick+0x54>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <HAL_InitTick+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f93b 	bl	80008fa <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 f903 	bl	80008a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <HAL_InitTick+0x5c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x1c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <HAL_IncTick+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a03      	ldr	r2, [pc, #12]	@ (80006e0 <HAL_IncTick+0x20>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000008 	.word	0x20000008
 80006e0:	200002d4 	.word	0x200002d4

080006e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	@ (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	200002d4 	.word	0x200002d4

080006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	@ (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4906      	ldr	r1, [pc, #24]	@ (8000790 <__NVIC_EnableIRQ+0x34>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100

08000794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db0a      	blt.n	80007be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <__NVIC_SetPriority+0x4c>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	0112      	lsls	r2, r2, #4
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	440b      	add	r3, r1
 80007b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007bc:	e00a      	b.n	80007d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4908      	ldr	r1, [pc, #32]	@ (80007e4 <__NVIC_SetPriority+0x50>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	3b04      	subs	r3, #4
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	761a      	strb	r2, [r3, #24]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b089      	sub	sp, #36	@ 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	f1c3 0307 	rsb	r3, r3, #7
 8000802:	2b04      	cmp	r3, #4
 8000804:	bf28      	it	cs
 8000806:	2304      	movcs	r3, #4
 8000808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3304      	adds	r3, #4
 800080e:	2b06      	cmp	r3, #6
 8000810:	d902      	bls.n	8000818 <NVIC_EncodePriority+0x30>
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3b03      	subs	r3, #3
 8000816:	e000      	b.n	800081a <NVIC_EncodePriority+0x32>
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43da      	mvns	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	401a      	ands	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	43d9      	mvns	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	4313      	orrs	r3, r2
         );
}
 8000842:	4618      	mov	r0, r3
 8000844:	3724      	adds	r7, #36	@ 0x24
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800085c:	d301      	bcc.n	8000862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085e:	2301      	movs	r3, #1
 8000860:	e00f      	b.n	8000882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <SysTick_Config+0x40>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086a:	210f      	movs	r1, #15
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f7ff ff90 	bl	8000794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <SysTick_Config+0x40>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087a:	4b04      	ldr	r3, [pc, #16]	@ (800088c <SysTick_Config+0x40>)
 800087c:	2207      	movs	r2, #7
 800087e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	e000e010 	.word	0xe000e010

08000890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff2d 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b8:	f7ff ff42 	bl	8000740 <__NVIC_GetPriorityGrouping>
 80008bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	6978      	ldr	r0, [r7, #20]
 80008c4:	f7ff ff90 	bl	80007e8 <NVIC_EncodePriority>
 80008c8:	4602      	mov	r2, r0
 80008ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff5f 	bl	8000794 <__NVIC_SetPriority>
}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff35 	bl	800075c <__NVIC_EnableIRQ>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ffa2 	bl	800084c <SysTick_Config>
 8000908:	4603      	mov	r3, r0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b480      	push	{r7}
 8000916:	b08b      	sub	sp, #44	@ 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000926:	e169      	b.n	8000bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000928:	2201      	movs	r2, #1
 800092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	429a      	cmp	r2, r3
 8000942:	f040 8158 	bne.w	8000bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a9a      	ldr	r2, [pc, #616]	@ (8000bb4 <HAL_GPIO_Init+0x2a0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d05e      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000950:	4a98      	ldr	r2, [pc, #608]	@ (8000bb4 <HAL_GPIO_Init+0x2a0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d875      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000956:	4a98      	ldr	r2, [pc, #608]	@ (8000bb8 <HAL_GPIO_Init+0x2a4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d058      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 800095c:	4a96      	ldr	r2, [pc, #600]	@ (8000bb8 <HAL_GPIO_Init+0x2a4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d86f      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000962:	4a96      	ldr	r2, [pc, #600]	@ (8000bbc <HAL_GPIO_Init+0x2a8>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d052      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000968:	4a94      	ldr	r2, [pc, #592]	@ (8000bbc <HAL_GPIO_Init+0x2a8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d869      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800096e:	4a94      	ldr	r2, [pc, #592]	@ (8000bc0 <HAL_GPIO_Init+0x2ac>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d04c      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000974:	4a92      	ldr	r2, [pc, #584]	@ (8000bc0 <HAL_GPIO_Init+0x2ac>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d863      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800097a:	4a92      	ldr	r2, [pc, #584]	@ (8000bc4 <HAL_GPIO_Init+0x2b0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d046      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000980:	4a90      	ldr	r2, [pc, #576]	@ (8000bc4 <HAL_GPIO_Init+0x2b0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d85d      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000986:	2b12      	cmp	r3, #18
 8000988:	d82a      	bhi.n	80009e0 <HAL_GPIO_Init+0xcc>
 800098a:	2b12      	cmp	r3, #18
 800098c:	d859      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800098e:	a201      	add	r2, pc, #4	@ (adr r2, 8000994 <HAL_GPIO_Init+0x80>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	08000a0f 	.word	0x08000a0f
 8000998:	080009e9 	.word	0x080009e9
 800099c:	080009fb 	.word	0x080009fb
 80009a0:	08000a3d 	.word	0x08000a3d
 80009a4:	08000a43 	.word	0x08000a43
 80009a8:	08000a43 	.word	0x08000a43
 80009ac:	08000a43 	.word	0x08000a43
 80009b0:	08000a43 	.word	0x08000a43
 80009b4:	08000a43 	.word	0x08000a43
 80009b8:	08000a43 	.word	0x08000a43
 80009bc:	08000a43 	.word	0x08000a43
 80009c0:	08000a43 	.word	0x08000a43
 80009c4:	08000a43 	.word	0x08000a43
 80009c8:	08000a43 	.word	0x08000a43
 80009cc:	08000a43 	.word	0x08000a43
 80009d0:	08000a43 	.word	0x08000a43
 80009d4:	08000a43 	.word	0x08000a43
 80009d8:	080009f1 	.word	0x080009f1
 80009dc:	08000a05 	.word	0x08000a05
 80009e0:	4a79      	ldr	r2, [pc, #484]	@ (8000bc8 <HAL_GPIO_Init+0x2b4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d013      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009e6:	e02c      	b.n	8000a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	623b      	str	r3, [r7, #32]
          break;
 80009ee:	e029      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	3304      	adds	r3, #4
 80009f6:	623b      	str	r3, [r7, #32]
          break;
 80009f8:	e024      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	3308      	adds	r3, #8
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e01f      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	330c      	adds	r3, #12
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e01a      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d102      	bne.n	8000a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a16:	2304      	movs	r3, #4
 8000a18:	623b      	str	r3, [r7, #32]
          break;
 8000a1a:	e013      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d105      	bne.n	8000a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a24:	2308      	movs	r3, #8
 8000a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	611a      	str	r2, [r3, #16]
          break;
 8000a2e:	e009      	b.n	8000a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a30:	2308      	movs	r3, #8
 8000a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	615a      	str	r2, [r3, #20]
          break;
 8000a3a:	e003      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e000      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          break;
 8000a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	2bff      	cmp	r3, #255	@ 0xff
 8000a48:	d801      	bhi.n	8000a4e <HAL_GPIO_Init+0x13a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	e001      	b.n	8000a52 <HAL_GPIO_Init+0x13e>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3304      	adds	r3, #4
 8000a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2bff      	cmp	r3, #255	@ 0xff
 8000a58:	d802      	bhi.n	8000a60 <HAL_GPIO_Init+0x14c>
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x152>
 8000a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a62:	3b08      	subs	r3, #8
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	401a      	ands	r2, r3
 8000a78:	6a39      	ldr	r1, [r7, #32]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 80b1 	beq.w	8000bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a94:	4b4d      	ldr	r3, [pc, #308]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a4c      	ldr	r2, [pc, #304]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aac:	4a48      	ldr	r2, [pc, #288]	@ (8000bd0 <HAL_GPIO_Init+0x2bc>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a40      	ldr	r2, [pc, #256]	@ (8000bd4 <HAL_GPIO_Init+0x2c0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d013      	beq.n	8000b00 <HAL_GPIO_Init+0x1ec>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a3f      	ldr	r2, [pc, #252]	@ (8000bd8 <HAL_GPIO_Init+0x2c4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d00d      	beq.n	8000afc <HAL_GPIO_Init+0x1e8>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bdc <HAL_GPIO_Init+0x2c8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d007      	beq.n	8000af8 <HAL_GPIO_Init+0x1e4>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3d      	ldr	r2, [pc, #244]	@ (8000be0 <HAL_GPIO_Init+0x2cc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d101      	bne.n	8000af4 <HAL_GPIO_Init+0x1e0>
 8000af0:	2303      	movs	r3, #3
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000af4:	2304      	movs	r3, #4
 8000af6:	e004      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e002      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000b00:	2300      	movs	r3, #0
 8000b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b04:	f002 0203 	and.w	r2, r2, #3
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b12:	492f      	ldr	r1, [pc, #188]	@ (8000bd0 <HAL_GPIO_Init+0x2bc>)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d006      	beq.n	8000b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	492c      	ldr	r1, [pc, #176]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	608b      	str	r3, [r1, #8]
 8000b38:	e006      	b.n	8000b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	4928      	ldr	r1, [pc, #160]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	4922      	ldr	r1, [pc, #136]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	60cb      	str	r3, [r1, #12]
 8000b60:	e006      	b.n	8000b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b62:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	491e      	ldr	r1, [pc, #120]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b7c:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	4918      	ldr	r1, [pc, #96]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	604b      	str	r3, [r1, #4]
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4914      	ldr	r1, [pc, #80]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d021      	beq.n	8000be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	490e      	ldr	r1, [pc, #56]	@ (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	600b      	str	r3, [r1, #0]
 8000bb0:	e021      	b.n	8000bf6 <HAL_GPIO_Init+0x2e2>
 8000bb2:	bf00      	nop
 8000bb4:	10320000 	.word	0x10320000
 8000bb8:	10310000 	.word	0x10310000
 8000bbc:	10220000 	.word	0x10220000
 8000bc0:	10210000 	.word	0x10210000
 8000bc4:	10120000 	.word	0x10120000
 8000bc8:	10110000 	.word	0x10110000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40011400 	.word	0x40011400
 8000be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_GPIO_Init+0x304>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4909      	ldr	r1, [pc, #36]	@ (8000c18 <HAL_GPIO_Init+0x304>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	fa22 f303 	lsr.w	r3, r2, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f47f ae8e 	bne.w	8000928 <HAL_GPIO_Init+0x14>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	372c      	adds	r7, #44	@ 0x2c
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c38:	e003      	b.n	8000c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	041a      	lsls	r2, r3, #16
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	611a      	str	r2, [r3, #16]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43d9      	mvns	r1, r3
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	400b      	ands	r3, r1
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	611a      	str	r2, [r3, #16]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c8c:	695a      	ldr	r2, [r3, #20]
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4013      	ands	r3, r2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f806 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40010400 	.word	0x40010400

08000cb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e272      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8087 	beq.w	8000df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce4:	4b92      	ldr	r3, [pc, #584]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d00c      	beq.n	8000d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d112      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
 8000cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d08:	d10b      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0a:	4b89      	ldr	r3, [pc, #548]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d06c      	beq.n	8000df0 <HAL_RCC_OscConfig+0x12c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d168      	bne.n	8000df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e24c      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d2a:	d106      	bne.n	8000d3a <HAL_RCC_OscConfig+0x76>
 8000d2c:	4b80      	ldr	r3, [pc, #512]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a7f      	ldr	r2, [pc, #508]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e02e      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10c      	bne.n	8000d5c <HAL_RCC_OscConfig+0x98>
 8000d42:	4b7b      	ldr	r3, [pc, #492]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a7a      	ldr	r2, [pc, #488]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b78      	ldr	r3, [pc, #480]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a77      	ldr	r2, [pc, #476]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e01d      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0xbc>
 8000d66:	4b72      	ldr	r3, [pc, #456]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a71      	ldr	r2, [pc, #452]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b6f      	ldr	r3, [pc, #444]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a6e      	ldr	r2, [pc, #440]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e00b      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d80:	4b6b      	ldr	r3, [pc, #428]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a6a      	ldr	r2, [pc, #424]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b68      	ldr	r3, [pc, #416]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a67      	ldr	r2, [pc, #412]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d013      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fca0 	bl	80006e4 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da8:	f7ff fc9c 	bl	80006e4 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b64      	cmp	r3, #100	@ 0x64
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e200      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	4b5d      	ldr	r3, [pc, #372]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0xe4>
 8000dc6:	e014      	b.n	8000df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fc8c 	bl	80006e4 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fc88 	bl	80006e4 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	@ 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e1ec      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	4b53      	ldr	r3, [pc, #332]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f0      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x10c>
 8000dee:	e000      	b.n	8000df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d063      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d11c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x18c>
 8000e16:	4b46      	ldr	r3, [pc, #280]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d116      	bne.n	8000e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e22:	4b43      	ldr	r3, [pc, #268]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x176>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e1c0      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4939      	ldr	r1, [pc, #228]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4e:	e03a      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d020      	beq.n	8000e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e58:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fc41 	bl	80006e4 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc3d 	bl	80006e4 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1a1      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e84:	4b2a      	ldr	r3, [pc, #168]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4927      	ldr	r1, [pc, #156]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
 8000e98:	e015      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9a:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fc20 	bl	80006e4 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc1c 	bl	80006e4 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e180      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d03a      	beq.n	8000f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d019      	beq.n	8000f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fc00 	bl	80006e4 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fbfc 	bl	80006e4 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e160      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 face 	bl	80014a8 <RCC_Delay>
 8000f0c:	e01c      	b.n	8000f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f14:	f7ff fbe6 	bl	80006e4 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1a:	e00f      	b.n	8000f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fbe2 	bl	80006e4 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d908      	bls.n	8000f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e146      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	42420000 	.word	0x42420000
 8000f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3c:	4b92      	ldr	r3, [pc, #584]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e9      	bne.n	8000f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80a6 	beq.w	80010a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b88      	ldr	r3, [pc, #544]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a87      	ldr	r2, [pc, #540]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b85      	ldr	r3, [pc, #532]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f82:	4b82      	ldr	r3, [pc, #520]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d118      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a7e      	ldr	r2, [pc, #504]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fba3 	bl	80006e4 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fb9f 	bl	80006e4 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	@ 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e103      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b75      	ldr	r3, [pc, #468]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x312>
 8000fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6213      	str	r3, [r2, #32]
 8000fd4:	e02d      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x334>
 8000fde:	4b6a      	ldr	r3, [pc, #424]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a69      	ldr	r2, [pc, #420]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	4b67      	ldr	r3, [pc, #412]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a66      	ldr	r2, [pc, #408]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	e01c      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d10c      	bne.n	800101a <HAL_RCC_OscConfig+0x356>
 8001000:	4b61      	ldr	r3, [pc, #388]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a60      	ldr	r2, [pc, #384]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	4b5e      	ldr	r3, [pc, #376]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a5d      	ldr	r2, [pc, #372]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	e00b      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 800101a:	4b5b      	ldr	r3, [pc, #364]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a5a      	ldr	r2, [pc, #360]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b58      	ldr	r3, [pc, #352]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a57      	ldr	r2, [pc, #348]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d015      	beq.n	8001066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff fb53 	bl	80006e4 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	e00a      	b.n	8001058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f7ff fb4f 	bl	80006e4 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001050:	4293      	cmp	r3, r2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e0b1      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0ee      	beq.n	8001042 <HAL_RCC_OscConfig+0x37e>
 8001064:	e014      	b.n	8001090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fb3d 	bl	80006e4 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff fb39 	bl	80006e4 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e09b      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	4b40      	ldr	r3, [pc, #256]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1ee      	bne.n	800106e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d105      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001096:	4b3c      	ldr	r3, [pc, #240]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a3b      	ldr	r2, [pc, #236]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8087 	beq.w	80011ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ac:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d061      	beq.n	800117c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d146      	bne.n	800114e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fb0d 	bl	80006e4 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff fb09 	bl	80006e4 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e06d      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d108      	bne.n	8001108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	4921      	ldr	r1, [pc, #132]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a19      	ldr	r1, [r3, #32]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001118:	430b      	orrs	r3, r1
 800111a:	491b      	ldr	r1, [pc, #108]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fadd 	bl	80006e4 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fad9 	bl	80006e4 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e03d      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x46a>
 800114c:	e035      	b.n	80011ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fac6 	bl	80006e4 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff fac2 	bl	80006e4 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e026      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x498>
 800117a:	e01e      	b.n	80011ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e019      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
 8001188:	40021000 	.word	0x40021000
 800118c:	40007000 	.word	0x40007000
 8001190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_RCC_OscConfig+0x500>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0d0      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d910      	bls.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b67      	ldr	r3, [pc, #412]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4965      	ldr	r1, [pc, #404]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0b8      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001224:	4b59      	ldr	r3, [pc, #356]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a58      	ldr	r2, [pc, #352]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800122e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	4b53      	ldr	r3, [pc, #332]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001248:	4b50      	ldr	r3, [pc, #320]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	494d      	ldr	r1, [pc, #308]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d040      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e07f      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	4b41      	ldr	r3, [pc, #260]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e073      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b3d      	ldr	r3, [pc, #244]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e06b      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	4b39      	ldr	r3, [pc, #228]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4936      	ldr	r1, [pc, #216]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fa14 	bl	80006e4 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c0:	f7ff fa10 	bl	80006e4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e053      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1eb      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d210      	bcs.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 0207 	bic.w	r2, r3, #7
 80012fe:	4922      	ldr	r1, [pc, #136]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e032      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4916      	ldr	r1, [pc, #88]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	490e      	ldr	r1, [pc, #56]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001356:	f000 f821 	bl	800139c <HAL_RCC_GetSysClockFreq>
 800135a:	4602      	mov	r2, r0
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	490a      	ldr	r1, [pc, #40]	@ (8001390 <HAL_RCC_ClockConfig+0x1c8>)
 8001368:	5ccb      	ldrb	r3, [r1, r3]
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_RCC_ClockConfig+0x1cc>)
 8001370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_ClockConfig+0x1d0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f972 	bl	8000660 <HAL_InitTick>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000
 800138c:	40021000 	.word	0x40021000
 8001390:	08002bb8 	.word	0x08002bb8
 8001394:	20000000 	.word	0x20000000
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x94>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x30>
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ca:	e027      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ce:	613b      	str	r3, [r7, #16]
      break;
 80013d0:	e027      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d010      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	0c5b      	lsrs	r3, r3, #17
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fe:	fb03 f202 	mul.w	r2, r3, r2
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e004      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	613b      	str	r3, [r7, #16]
      break;
 800141a:	e002      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 800141e:	613b      	str	r3, [r7, #16]
      break;
 8001420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001422:	693b      	ldr	r3, [r7, #16]
}
 8001424:	4618      	mov	r0, r3
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	007a1200 	.word	0x007a1200
 8001438:	08002bd0 	.word	0x08002bd0
 800143c:	08002be0 	.word	0x08002be0
 8001440:	003d0900 	.word	0x003d0900

08001444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001448:	4b02      	ldr	r3, [pc, #8]	@ (8001454 <HAL_RCC_GetHCLKFreq+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000000 	.word	0x20000000

08001458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800145c:	f7ff fff2 	bl	8001444 <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4903      	ldr	r1, [pc, #12]	@ (800147c <HAL_RCC_GetPCLK1Freq+0x24>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	08002bc8 	.word	0x08002bc8

08001480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001484:	f7ff ffde 	bl	8001444 <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0adb      	lsrs	r3, r3, #11
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	@ (80014a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	08002bc8 	.word	0x08002bc8

080014a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <RCC_Delay+0x34>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <RCC_Delay+0x38>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0a5b      	lsrs	r3, r3, #9
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014c4:	bf00      	nop
  }
  while (Delay --);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1e5a      	subs	r2, r3, #1
 80014ca:	60fa      	str	r2, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f9      	bne.n	80014c4 <RCC_Delay+0x1c>
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000000 	.word	0x20000000
 80014e0:	10624dd3 	.word	0x10624dd3

080014e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e042      	b.n	800157c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7fe fff8 	bl	8000500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2224      	movs	r2, #36	@ 0x24
 8001514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f82b 	bl	8001584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800153c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800154c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800155c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2220      	movs	r2, #32
 8001568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80015be:	f023 030c 	bic.w	r3, r3, #12
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001698 <UART_SetConfig+0x114>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d103      	bne.n	80015f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015ec:	f7ff ff48 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	e002      	b.n	80015fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80015f4:	f7ff ff30 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 80015f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009a      	lsls	r2, r3, #2
 8001604:	441a      	add	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	4a22      	ldr	r2, [pc, #136]	@ (800169c <UART_SetConfig+0x118>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	0119      	lsls	r1, r3, #4
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009a      	lsls	r2, r3, #2
 8001624:	441a      	add	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <UART_SetConfig+0x118>)
 8001632:	fba3 0302 	umull	r0, r3, r3, r2
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2064      	movs	r0, #100	@ 0x64
 800163a:	fb00 f303 	mul.w	r3, r0, r3
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	3332      	adds	r3, #50	@ 0x32
 8001644:	4a15      	ldr	r2, [pc, #84]	@ (800169c <UART_SetConfig+0x118>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001650:	4419      	add	r1, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	009a      	lsls	r2, r3, #2
 800165c:	441a      	add	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fbb2 f2f3 	udiv	r2, r2, r3
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <UART_SetConfig+0x118>)
 800166a:	fba3 0302 	umull	r0, r3, r3, r2
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2064      	movs	r0, #100	@ 0x64
 8001672:	fb00 f303 	mul.w	r3, r0, r3
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	3332      	adds	r3, #50	@ 0x32
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <UART_SetConfig+0x118>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	f003 020f 	and.w	r2, r3, #15
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	440a      	add	r2, r1
 800168e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40013800 	.word	0x40013800
 800169c:	51eb851f 	.word	0x51eb851f

080016a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80016ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b2:	2b84      	cmp	r3, #132	@ 0x84
 80016b4:	d005      	beq.n	80016c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80016b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	3303      	adds	r3, #3
 80016c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80016d2:	f000 fadf 	bl	8001c94 <vTaskStartScheduler>
  
  return osOK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}

080016dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d020      	beq.n	8001730 <osThreadCreate+0x54>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d01c      	beq.n	8001730 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685c      	ldr	r4, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691e      	ldr	r6, [r3, #16]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ffc9 	bl	80016a0 <makeFreeRtosPriority>
 800170e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001718:	9202      	str	r2, [sp, #8]
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	9100      	str	r1, [sp, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	4632      	mov	r2, r6
 8001722:	4629      	mov	r1, r5
 8001724:	4620      	mov	r0, r4
 8001726:	f000 f8e8 	bl	80018fa <xTaskCreateStatic>
 800172a:	4603      	mov	r3, r0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e01c      	b.n	800176a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685c      	ldr	r4, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800173c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ffab 	bl	80016a0 <makeFreeRtosPriority>
 800174a:	4602      	mov	r2, r0
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4632      	mov	r2, r6
 8001758:	4629      	mov	r1, r5
 800175a:	4620      	mov	r0, r4
 800175c:	f000 f92d 	bl	80019ba <xTaskCreate>
 8001760:	4603      	mov	r3, r0
 8001762:	2b01      	cmp	r3, #1
 8001764:	d001      	beq.n	800176a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001774 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <osDelay+0x16>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	e000      	b.n	800178c <osDelay+0x18>
 800178a:	2301      	movs	r3, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fa4b 	bl	8001c28 <vTaskDelay>
  
  return osOK;
 8001792:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f103 0208 	add.w	r2, r3, #8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f103 0208 	add.w	r2, r3, #8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f103 0208 	add.w	r2, r3, #8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184e:	d103      	bne.n	8001858 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e00c      	b.n	8001872 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3308      	adds	r3, #8
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e002      	b.n	8001866 <vListInsert+0x2e>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	d2f6      	bcs.n	8001860 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6892      	ldr	r2, [r2, #8]
 80018be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6852      	ldr	r2, [r2, #4]
 80018c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d103      	bne.n	80018dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1e5a      	subs	r2, r3, #1
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b08e      	sub	sp, #56	@ 0x38
 80018fe:	af04      	add	r7, sp, #16
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10b      	bne.n	8001926 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800190e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001912:	f383 8811 	msr	BASEPRI, r3
 8001916:	f3bf 8f6f 	isb	sy
 800191a:	f3bf 8f4f 	dsb	sy
 800191e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	e7fd      	b.n	8001922 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10b      	bne.n	8001944 <xTaskCreateStatic+0x4a>
	__asm volatile
 800192c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001930:	f383 8811 	msr	BASEPRI, r3
 8001934:	f3bf 8f6f 	isb	sy
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	61fb      	str	r3, [r7, #28]
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001944:	2354      	movs	r3, #84	@ 0x54
 8001946:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b54      	cmp	r3, #84	@ 0x54
 800194c:	d00b      	beq.n	8001966 <xTaskCreateStatic+0x6c>
	__asm volatile
 800194e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001952:	f383 8811 	msr	BASEPRI, r3
 8001956:	f3bf 8f6f 	isb	sy
 800195a:	f3bf 8f4f 	dsb	sy
 800195e:	61bb      	str	r3, [r7, #24]
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	e7fd      	b.n	8001962 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001966:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01e      	beq.n	80019ac <xTaskCreateStatic+0xb2>
 800196e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01b      	beq.n	80019ac <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800197c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	2202      	movs	r2, #2
 8001982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001986:	2300      	movs	r3, #0
 8001988:	9303      	str	r3, [sp, #12]
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f850 	bl	8001a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80019a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019a6:	f000 f8d5 	bl	8001b54 <prvAddNewTaskToReadyList>
 80019aa:	e001      	b.n	80019b0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80019b0:	697b      	ldr	r3, [r7, #20]
	}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3728      	adds	r7, #40	@ 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b08c      	sub	sp, #48	@ 0x30
 80019be:	af04      	add	r7, sp, #16
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4613      	mov	r3, r2
 80019c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fe8e 	bl	80026f0 <pvPortMalloc>
 80019d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019dc:	2054      	movs	r0, #84	@ 0x54
 80019de:	f000 fe87 	bl	80026f0 <pvPortMalloc>
 80019e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80019f0:	e005      	b.n	80019fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f000 ff4a 	bl	800288c <vPortFree>
 80019f8:	e001      	b.n	80019fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d017      	beq.n	8001a34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a0c:	88fa      	ldrh	r2, [r7, #6]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9303      	str	r3, [sp, #12]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f80e 	bl	8001a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a28:	69f8      	ldr	r0, [r7, #28]
 8001a2a:	f000 f893 	bl	8001b54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	e002      	b.n	8001a3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
	}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f023 0307 	bic.w	r3, r3, #7
 8001a6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	617b      	str	r3, [r7, #20]
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	e7fd      	b.n	8001a8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01f      	beq.n	8001ad4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	e012      	b.n	8001ac0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	7819      	ldrb	r1, [r3, #0]
 8001aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3334      	adds	r3, #52	@ 0x34
 8001aaa:	460a      	mov	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d006      	beq.n	8001ac8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3301      	adds	r3, #1
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	d9e9      	bls.n	8001a9a <prvInitialiseNewTask+0x56>
 8001ac6:	e000      	b.n	8001aca <prvInitialiseNewTask+0x86>
			{
				break;
 8001ac8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ad2:	e003      	b.n	8001adc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d901      	bls.n	8001ae6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ae2:	2306      	movs	r3, #6
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af4:	2200      	movs	r2, #0
 8001af6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001afa:	3304      	adds	r3, #4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fe6c 	bl	80017da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b04:	3318      	adds	r3, #24
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fe67 	bl	80017da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b14:	f1c3 0207 	rsb	r2, r3, #7
 8001b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b24:	2200      	movs	r2, #0
 8001b26:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	69b8      	ldr	r0, [r7, #24]
 8001b36:	f000 fc2b 	bl	8002390 <pxPortInitialiseStack>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001b5c:	f000 fd06 	bl	800256c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b60:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <prvAddNewTaskToReadyList+0xb8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a29      	ldr	r2, [pc, #164]	@ (8001c0c <prvAddNewTaskToReadyList+0xb8>)
 8001b68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001b6a:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <prvAddNewTaskToReadyList+0xbc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b72:	4a27      	ldr	r2, [pc, #156]	@ (8001c10 <prvAddNewTaskToReadyList+0xbc>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <prvAddNewTaskToReadyList+0xb8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d110      	bne.n	8001ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001b80:	f000 fac4 	bl	800210c <prvInitialiseTaskLists>
 8001b84:	e00d      	b.n	8001ba2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001b86:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <prvAddNewTaskToReadyList+0xc0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <prvAddNewTaskToReadyList+0xbc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d802      	bhi.n	8001ba2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c10 <prvAddNewTaskToReadyList+0xbc>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <prvAddNewTaskToReadyList+0xc4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <prvAddNewTaskToReadyList+0xc4>)
 8001baa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <prvAddNewTaskToReadyList+0xc8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	4a18      	ldr	r2, [pc, #96]	@ (8001c1c <prvAddNewTaskToReadyList+0xc8>)
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4a15      	ldr	r2, [pc, #84]	@ (8001c20 <prvAddNewTaskToReadyList+0xcc>)
 8001bcc:	441a      	add	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f7ff fe0c 	bl	80017f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001bda:	f000 fcf7 	bl	80025cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <prvAddNewTaskToReadyList+0xc0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00e      	beq.n	8001c04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <prvAddNewTaskToReadyList+0xbc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <prvAddNewTaskToReadyList+0xd0>)
 8001bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200003d8 	.word	0x200003d8
 8001c10:	200002d8 	.word	0x200002d8
 8001c14:	200003e4 	.word	0x200003e4
 8001c18:	200003f4 	.word	0x200003f4
 8001c1c:	200003e0 	.word	0x200003e0
 8001c20:	200002dc 	.word	0x200002dc
 8001c24:	e000ed04 	.word	0xe000ed04

08001c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d018      	beq.n	8001c6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <vTaskDelay+0x64>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <vTaskDelay+0x32>
	__asm volatile
 8001c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	60bb      	str	r3, [r7, #8]
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	e7fd      	b.n	8001c56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001c5a:	f000 f87d 	bl	8001d58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c5e:	2100      	movs	r1, #0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fb2f 	bl	80022c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001c66:	f000 f885 	bl	8001d74 <xTaskResumeAll>
 8001c6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <vTaskDelay+0x68>)
 8001c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000400 	.word	0x20000400
 8001c90:	e000ed04 	.word	0xe000ed04

08001c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001ca2:	463a      	mov	r2, r7
 8001ca4:	1d39      	adds	r1, r7, #4
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fa50 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	9202      	str	r2, [sp, #8]
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	491f      	ldr	r1, [pc, #124]	@ (8001d40 <vTaskStartScheduler+0xac>)
 8001cc4:	481f      	ldr	r0, [pc, #124]	@ (8001d44 <vTaskStartScheduler+0xb0>)
 8001cc6:	f7ff fe18 	bl	80018fa <xTaskCreateStatic>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8001d48 <vTaskStartScheduler+0xb4>)
 8001cce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <vTaskStartScheduler+0xb4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e001      	b.n	8001ce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d116      	bne.n	8001d16 <vTaskStartScheduler+0x82>
	__asm volatile
 8001ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cec:	f383 8811 	msr	BASEPRI, r3
 8001cf0:	f3bf 8f6f 	isb	sy
 8001cf4:	f3bf 8f4f 	dsb	sy
 8001cf8:	613b      	str	r3, [r7, #16]
}
 8001cfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <vTaskStartScheduler+0xb8>)
 8001cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8001d02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <vTaskStartScheduler+0xbc>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <vTaskStartScheduler+0xc0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001d10:	f000 fbba 	bl	8002488 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001d14:	e00f      	b.n	8001d36 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d10b      	bne.n	8001d36 <vTaskStartScheduler+0xa2>
	__asm volatile
 8001d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	60fb      	str	r3, [r7, #12]
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <vTaskStartScheduler+0x9e>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08002bb0 	.word	0x08002bb0
 8001d44:	080020dd 	.word	0x080020dd
 8001d48:	200003fc 	.word	0x200003fc
 8001d4c:	200003f8 	.word	0x200003f8
 8001d50:	200003e4 	.word	0x200003e4
 8001d54:	200003dc 	.word	0x200003dc

08001d58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001d5c:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <vTaskSuspendAll+0x18>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	4a03      	ldr	r2, [pc, #12]	@ (8001d70 <vTaskSuspendAll+0x18>)
 8001d64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000400 	.word	0x20000400

08001d74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d82:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <xTaskResumeAll+0x118>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <xTaskResumeAll+0x2e>
	__asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	603b      	str	r3, [r7, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001da2:	f000 fbe3 	bl	800256c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001da6:	4b39      	ldr	r3, [pc, #228]	@ (8001e8c <xTaskResumeAll+0x118>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	4a37      	ldr	r2, [pc, #220]	@ (8001e8c <xTaskResumeAll+0x118>)
 8001dae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001db0:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <xTaskResumeAll+0x118>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d161      	bne.n	8001e7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001db8:	4b35      	ldr	r3, [pc, #212]	@ (8001e90 <xTaskResumeAll+0x11c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d05d      	beq.n	8001e7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001dc0:	e02e      	b.n	8001e20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dc2:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <xTaskResumeAll+0x120>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3318      	adds	r3, #24
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fd6a 	bl	80018a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fd65 	bl	80018a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de2:	2201      	movs	r2, #1
 8001de4:	409a      	lsls	r2, r3
 8001de6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e98 <xTaskResumeAll+0x124>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	4a2a      	ldr	r2, [pc, #168]	@ (8001e98 <xTaskResumeAll+0x124>)
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4a27      	ldr	r2, [pc, #156]	@ (8001e9c <xTaskResumeAll+0x128>)
 8001dfe:	441a      	add	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f7ff fcf3 	bl	80017f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e10:	4b23      	ldr	r3, [pc, #140]	@ (8001ea0 <xTaskResumeAll+0x12c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <xTaskResumeAll+0x130>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e20:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <xTaskResumeAll+0x120>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1cc      	bne.n	8001dc2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001e2e:	f000 fa0b 	bl	8002248 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <xTaskResumeAll+0x134>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d010      	beq.n	8001e60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001e3e:	f000 f837 	bl	8001eb0 <xTaskIncrementTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <xTaskResumeAll+0x130>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f1      	bne.n	8001e3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <xTaskResumeAll+0x134>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <xTaskResumeAll+0x130>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d009      	beq.n	8001e7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <xTaskResumeAll+0x138>)
 8001e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e7c:	f000 fba6 	bl	80025cc <vPortExitCritical>

	return xAlreadyYielded;
 8001e80:	68bb      	ldr	r3, [r7, #8]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000400 	.word	0x20000400
 8001e90:	200003d8 	.word	0x200003d8
 8001e94:	20000398 	.word	0x20000398
 8001e98:	200003e0 	.word	0x200003e0
 8001e9c:	200002dc 	.word	0x200002dc
 8001ea0:	200002d8 	.word	0x200002d8
 8001ea4:	200003ec 	.word	0x200003ec
 8001ea8:	200003e8 	.word	0x200003e8
 8001eac:	e000ed04 	.word	0xe000ed04

08001eb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eba:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff8 <xTaskIncrementTick+0x148>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 808f 	bne.w	8001fe2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <xTaskIncrementTick+0x14c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8001ffc <xTaskIncrementTick+0x14c>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d121      	bne.n	8001f1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ed8:	4b49      	ldr	r3, [pc, #292]	@ (8002000 <xTaskIncrementTick+0x150>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <xTaskIncrementTick+0x4a>
	__asm volatile
 8001ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	603b      	str	r3, [r7, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <xTaskIncrementTick+0x46>
 8001efa:	4b41      	ldr	r3, [pc, #260]	@ (8002000 <xTaskIncrementTick+0x150>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	4b40      	ldr	r3, [pc, #256]	@ (8002004 <xTaskIncrementTick+0x154>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a3e      	ldr	r2, [pc, #248]	@ (8002000 <xTaskIncrementTick+0x150>)
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4a3e      	ldr	r2, [pc, #248]	@ (8002004 <xTaskIncrementTick+0x154>)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002008 <xTaskIncrementTick+0x158>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	4a3c      	ldr	r2, [pc, #240]	@ (8002008 <xTaskIncrementTick+0x158>)
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	f000 f996 	bl	8002248 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <xTaskIncrementTick+0x15c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d348      	bcc.n	8001fb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f26:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <xTaskIncrementTick+0x150>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f30:	4b36      	ldr	r3, [pc, #216]	@ (800200c <xTaskIncrementTick+0x15c>)
 8001f32:	f04f 32ff 	mov.w	r2, #4294967295
 8001f36:	601a      	str	r2, [r3, #0]
					break;
 8001f38:	e03e      	b.n	8001fb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f3a:	4b31      	ldr	r3, [pc, #196]	@ (8002000 <xTaskIncrementTick+0x150>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d203      	bcs.n	8001f5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f52:	4a2e      	ldr	r2, [pc, #184]	@ (800200c <xTaskIncrementTick+0x15c>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001f58:	e02e      	b.n	8001fb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fca2 	bl	80018a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3318      	adds	r3, #24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fc99 	bl	80018a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	4b24      	ldr	r3, [pc, #144]	@ (8002010 <xTaskIncrementTick+0x160>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <xTaskIncrementTick+0x160>)
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4a1f      	ldr	r2, [pc, #124]	@ (8002014 <xTaskIncrementTick+0x164>)
 8001f96:	441a      	add	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f7ff fc27 	bl	80017f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <xTaskIncrementTick+0x168>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3b9      	bcc.n	8001f26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb6:	e7b6      	b.n	8001f26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001fb8:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <xTaskIncrementTick+0x168>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fbe:	4915      	ldr	r1, [pc, #84]	@ (8002014 <xTaskIncrementTick+0x164>)
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d901      	bls.n	8001fd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <xTaskIncrementTick+0x16c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e004      	b.n	8001fec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <xTaskIncrementTick+0x170>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <xTaskIncrementTick+0x170>)
 8001fea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001fec:	697b      	ldr	r3, [r7, #20]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000400 	.word	0x20000400
 8001ffc:	200003dc 	.word	0x200003dc
 8002000:	20000390 	.word	0x20000390
 8002004:	20000394 	.word	0x20000394
 8002008:	200003f0 	.word	0x200003f0
 800200c:	200003f8 	.word	0x200003f8
 8002010:	200003e0 	.word	0x200003e0
 8002014:	200002dc 	.word	0x200002dc
 8002018:	200002d8 	.word	0x200002d8
 800201c:	200003ec 	.word	0x200003ec
 8002020:	200003e8 	.word	0x200003e8

08002024 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800202a:	4b27      	ldr	r3, [pc, #156]	@ (80020c8 <vTaskSwitchContext+0xa4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002032:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <vTaskSwitchContext+0xa8>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002038:	e040      	b.n	80020bc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <vTaskSwitchContext+0xa8>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <vTaskSwitchContext+0xac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	f1c3 031f 	rsb	r3, r3, #31
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	491f      	ldr	r1, [pc, #124]	@ (80020d4 <vTaskSwitchContext+0xb0>)
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10b      	bne.n	8002082 <vTaskSwitchContext+0x5e>
	__asm volatile
 800206a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206e:	f383 8811 	msr	BASEPRI, r3
 8002072:	f3bf 8f6f 	isb	sy
 8002076:	f3bf 8f4f 	dsb	sy
 800207a:	607b      	str	r3, [r7, #4]
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	e7fd      	b.n	800207e <vTaskSwitchContext+0x5a>
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <vTaskSwitchContext+0xb0>)
 800208e:	4413      	add	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	3308      	adds	r3, #8
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d104      	bne.n	80020b2 <vTaskSwitchContext+0x8e>
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <vTaskSwitchContext+0xb4>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000400 	.word	0x20000400
 80020cc:	200003ec 	.word	0x200003ec
 80020d0:	200003e0 	.word	0x200003e0
 80020d4:	200002dc 	.word	0x200002dc
 80020d8:	200002d8 	.word	0x200002d8

080020dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80020e4:	f000 f852 	bl	800218c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <prvIdleTask+0x28>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d9f9      	bls.n	80020e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <prvIdleTask+0x2c>)
 80020f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002100:	e7f0      	b.n	80020e4 <prvIdleTask+0x8>
 8002102:	bf00      	nop
 8002104:	200002dc 	.word	0x200002dc
 8002108:	e000ed04 	.word	0xe000ed04

0800210c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	e00c      	b.n	8002132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <prvInitialiseTaskLists+0x60>)
 8002124:	4413      	add	r3, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fb38 	bl	800179c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3301      	adds	r3, #1
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b06      	cmp	r3, #6
 8002136:	d9ef      	bls.n	8002118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002138:	480d      	ldr	r0, [pc, #52]	@ (8002170 <prvInitialiseTaskLists+0x64>)
 800213a:	f7ff fb2f 	bl	800179c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800213e:	480d      	ldr	r0, [pc, #52]	@ (8002174 <prvInitialiseTaskLists+0x68>)
 8002140:	f7ff fb2c 	bl	800179c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002144:	480c      	ldr	r0, [pc, #48]	@ (8002178 <prvInitialiseTaskLists+0x6c>)
 8002146:	f7ff fb29 	bl	800179c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800214a:	480c      	ldr	r0, [pc, #48]	@ (800217c <prvInitialiseTaskLists+0x70>)
 800214c:	f7ff fb26 	bl	800179c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002150:	480b      	ldr	r0, [pc, #44]	@ (8002180 <prvInitialiseTaskLists+0x74>)
 8002152:	f7ff fb23 	bl	800179c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <prvInitialiseTaskLists+0x78>)
 8002158:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <prvInitialiseTaskLists+0x64>)
 800215a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800215c:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <prvInitialiseTaskLists+0x7c>)
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <prvInitialiseTaskLists+0x68>)
 8002160:	601a      	str	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200002dc 	.word	0x200002dc
 8002170:	20000368 	.word	0x20000368
 8002174:	2000037c 	.word	0x2000037c
 8002178:	20000398 	.word	0x20000398
 800217c:	200003ac 	.word	0x200003ac
 8002180:	200003c4 	.word	0x200003c4
 8002184:	20000390 	.word	0x20000390
 8002188:	20000394 	.word	0x20000394

0800218c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002192:	e019      	b.n	80021c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002194:	f000 f9ea 	bl	800256c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <prvCheckTasksWaitingTermination+0x50>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fb7f 	bl	80018a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80021aa:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <prvCheckTasksWaitingTermination+0x54>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	4a0b      	ldr	r2, [pc, #44]	@ (80021e0 <prvCheckTasksWaitingTermination+0x54>)
 80021b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <prvCheckTasksWaitingTermination+0x58>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <prvCheckTasksWaitingTermination+0x58>)
 80021bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80021be:	f000 fa05 	bl	80025cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f810 	bl	80021e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <prvCheckTasksWaitingTermination+0x58>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e1      	bne.n	8002194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200003ac 	.word	0x200003ac
 80021e0:	200003d8 	.word	0x200003d8
 80021e4:	200003c0 	.word	0x200003c0

080021e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fb44 	bl	800288c <vPortFree>
				vPortFree( pxTCB );
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fb41 	bl	800288c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800220a:	e019      	b.n	8002240 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002212:	2b01      	cmp	r3, #1
 8002214:	d103      	bne.n	800221e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fb38 	bl	800288c <vPortFree>
	}
 800221c:	e010      	b.n	8002240 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002224:	2b02      	cmp	r3, #2
 8002226:	d00b      	beq.n	8002240 <prvDeleteTCB+0x58>
	__asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	60fb      	str	r3, [r7, #12]
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <prvDeleteTCB+0x54>
	}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800224e:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <prvResetNextTaskUnblockTime+0x38>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002258:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <prvResetNextTaskUnblockTime+0x3c>)
 800225a:	f04f 32ff 	mov.w	r2, #4294967295
 800225e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002260:	e008      	b.n	8002274 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <prvResetNextTaskUnblockTime+0x38>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <prvResetNextTaskUnblockTime+0x3c>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000390 	.word	0x20000390
 8002284:	200003f8 	.word	0x200003f8

08002288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800228e:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <xTaskGetSchedulerState+0x34>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002296:	2301      	movs	r3, #1
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	e008      	b.n	80022ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <xTaskGetSchedulerState+0x38>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80022a4:	2302      	movs	r3, #2
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	e001      	b.n	80022ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80022ae:	687b      	ldr	r3, [r7, #4]
	}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	200003e4 	.word	0x200003e4
 80022c0:	20000400 	.word	0x20000400

080022c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80022ce:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <prvAddCurrentTaskToDelayedList+0xb0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022d4:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3304      	adds	r3, #4
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fae4 	bl	80018a8 <uxListRemove>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10b      	bne.n	80022fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80022e6:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ec:	2201      	movs	r2, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <prvAddCurrentTaskToDelayedList+0xb8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4013      	ands	r3, r2
 80022fa:	4a20      	ldr	r2, [pc, #128]	@ (800237c <prvAddCurrentTaskToDelayedList+0xb8>)
 80022fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d10a      	bne.n	800231c <prvAddCurrentTaskToDelayedList+0x58>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800230c:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3304      	adds	r3, #4
 8002312:	4619      	mov	r1, r3
 8002314:	481a      	ldr	r0, [pc, #104]	@ (8002380 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002316:	f7ff fa6c 	bl	80017f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800231a:	e026      	b.n	800236a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002324:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d209      	bcs.n	8002348 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3304      	adds	r3, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4610      	mov	r0, r2
 8002342:	f7ff fa79 	bl	8001838 <vListInsert>
}
 8002346:	e010      	b.n	800236a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <prvAddCurrentTaskToDelayedList+0xc4>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3304      	adds	r3, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f7ff fa6f 	bl	8001838 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800235a:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <prvAddCurrentTaskToDelayedList+0xc8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	d202      	bcs.n	800236a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002364:	4a09      	ldr	r2, [pc, #36]	@ (800238c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6013      	str	r3, [r2, #0]
}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200003dc 	.word	0x200003dc
 8002378:	200002d8 	.word	0x200002d8
 800237c:	200003e0 	.word	0x200003e0
 8002380:	200003c4 	.word	0x200003c4
 8002384:	20000394 	.word	0x20000394
 8002388:	20000390 	.word	0x20000390
 800238c:	200003f8 	.word	0x200003f8

08002390 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3b04      	subs	r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3b04      	subs	r3, #4
 80023ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f023 0201 	bic.w	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3b04      	subs	r3, #4
 80023be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80023c0:	4a08      	ldr	r2, [pc, #32]	@ (80023e4 <pxPortInitialiseStack+0x54>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3b14      	subs	r3, #20
 80023ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b20      	subs	r3, #32
 80023d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	080023e9 	.word	0x080023e9

080023e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <prvTaskExitError+0x54>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d00b      	beq.n	8002414 <prvTaskExitError+0x2c>
	__asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	60fb      	str	r3, [r7, #12]
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <prvTaskExitError+0x28>
	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	60bb      	str	r3, [r7, #8]
}
 8002426:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002428:	bf00      	nop
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0fc      	beq.n	800242a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	2000000c 	.word	0x2000000c

08002440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002440:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <pxCurrentTCBConst2>)
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	6808      	ldr	r0, [r1, #0]
 8002446:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800244a:	f380 8809 	msr	PSP, r0
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f380 8811 	msr	BASEPRI, r0
 800245a:	f04e 0e0d 	orr.w	lr, lr, #13
 800245e:	4770      	bx	lr

08002460 <pxCurrentTCBConst2>:
 8002460:	200002d8 	.word	0x200002d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop

08002468 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002468:	4806      	ldr	r0, [pc, #24]	@ (8002484 <prvPortStartFirstTask+0x1c>)
 800246a:	6800      	ldr	r0, [r0, #0]
 800246c:	6800      	ldr	r0, [r0, #0]
 800246e:	f380 8808 	msr	MSP, r0
 8002472:	b662      	cpsie	i
 8002474:	b661      	cpsie	f
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	df00      	svc	0
 8002480:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002482:	bf00      	nop
 8002484:	e000ed08 	.word	0xe000ed08

08002488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800248e:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <xPortStartScheduler+0xd0>)
 8002490:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	22ff      	movs	r2, #255	@ 0xff
 800249e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <xPortStartScheduler+0xd4>)
 80024b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <xPortStartScheduler+0xd8>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024bc:	e009      	b.n	80024d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80024be:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <xPortStartScheduler+0xd8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <xPortStartScheduler+0xd8>)
 80024c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024da:	2b80      	cmp	r3, #128	@ 0x80
 80024dc:	d0ef      	beq.n	80024be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80024de:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <xPortStartScheduler+0xd8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d00b      	beq.n	8002502 <xPortStartScheduler+0x7a>
	__asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	60bb      	str	r3, [r7, #8]
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	e7fd      	b.n	80024fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002502:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <xPortStartScheduler+0xd8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	4a15      	ldr	r2, [pc, #84]	@ (8002560 <xPortStartScheduler+0xd8>)
 800250a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <xPortStartScheduler+0xd8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002514:	4a12      	ldr	r2, [pc, #72]	@ (8002560 <xPortStartScheduler+0xd8>)
 8002516:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002520:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <xPortStartScheduler+0xdc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0f      	ldr	r2, [pc, #60]	@ (8002564 <xPortStartScheduler+0xdc>)
 8002526:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800252a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <xPortStartScheduler+0xdc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0c      	ldr	r2, [pc, #48]	@ (8002564 <xPortStartScheduler+0xdc>)
 8002532:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002536:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002538:	f000 f8b8 	bl	80026ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <xPortStartScheduler+0xe0>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002542:	f7ff ff91 	bl	8002468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002546:	f7ff fd6d 	bl	8002024 <vTaskSwitchContext>
	prvTaskExitError();
 800254a:	f7ff ff4d 	bl	80023e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	e000e400 	.word	0xe000e400
 800255c:	20000404 	.word	0x20000404
 8002560:	20000408 	.word	0x20000408
 8002564:	e000ed20 	.word	0xe000ed20
 8002568:	2000000c 	.word	0x2000000c

0800256c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
	__asm volatile
 8002572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002576:	f383 8811 	msr	BASEPRI, r3
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	607b      	str	r3, [r7, #4]
}
 8002584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <vPortEnterCritical+0x58>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <vPortEnterCritical+0x58>)
 800258e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <vPortEnterCritical+0x58>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d110      	bne.n	80025ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <vPortEnterCritical+0x5c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <vPortEnterCritical+0x4e>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	603b      	str	r3, [r7, #0]
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	e7fd      	b.n	80025b6 <vPortEnterCritical+0x4a>
	}
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80025d2:	4b12      	ldr	r3, [pc, #72]	@ (800261c <vPortExitCritical+0x50>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10b      	bne.n	80025f2 <vPortExitCritical+0x26>
	__asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	607b      	str	r3, [r7, #4]
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	e7fd      	b.n	80025ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <vPortExitCritical+0x50>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	4a08      	ldr	r2, [pc, #32]	@ (800261c <vPortExitCritical+0x50>)
 80025fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80025fc:	4b07      	ldr	r3, [pc, #28]	@ (800261c <vPortExitCritical+0x50>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <vPortExitCritical+0x44>
 8002604:	2300      	movs	r3, #0
 8002606:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800260e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	2000000c 	.word	0x2000000c

08002620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002620:	f3ef 8009 	mrs	r0, PSP
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <pxCurrentTCBConst>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002630:	6010      	str	r0, [r2, #0]
 8002632:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002636:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800263a:	f380 8811 	msr	BASEPRI, r0
 800263e:	f7ff fcf1 	bl	8002024 <vTaskSwitchContext>
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f380 8811 	msr	BASEPRI, r0
 800264a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	6808      	ldr	r0, [r1, #0]
 8002652:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002656:	f380 8809 	msr	PSP, r0
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	4770      	bx	lr

08002660 <pxCurrentTCBConst>:
 8002660:	200002d8 	.word	0x200002d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop

08002668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
	__asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	607b      	str	r3, [r7, #4]
}
 8002680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002682:	f7ff fc15 	bl	8001eb0 <xTaskIncrementTick>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <xPortSysTickHandler+0x40>)
 800268e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	2300      	movs	r3, #0
 8002696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f383 8811 	msr	BASEPRI, r3
}
 800269e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80026b0:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <vPortSetupTimerInterrupt+0x30>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <vPortSetupTimerInterrupt+0x34>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <vPortSetupTimerInterrupt+0x38>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <vPortSetupTimerInterrupt+0x3c>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	4a08      	ldr	r2, [pc, #32]	@ (80026ec <vPortSetupTimerInterrupt+0x40>)
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80026ce:	4b03      	ldr	r3, [pc, #12]	@ (80026dc <vPortSetupTimerInterrupt+0x30>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	e000e010 	.word	0xe000e010
 80026e0:	e000e018 	.word	0xe000e018
 80026e4:	20000000 	.word	0x20000000
 80026e8:	10624dd3 	.word	0x10624dd3
 80026ec:	e000e014 	.word	0xe000e014

080026f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80026fc:	f7ff fb2c 	bl	8001d58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002700:	4b5c      	ldr	r3, [pc, #368]	@ (8002874 <pvPortMalloc+0x184>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002708:	f000 f924 	bl	8002954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800270c:	4b5a      	ldr	r3, [pc, #360]	@ (8002878 <pvPortMalloc+0x188>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 8095 	bne.w	8002844 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01e      	beq.n	800275e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002720:	2208      	movs	r2, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f023 0307 	bic.w	r3, r3, #7
 8002738:	3308      	adds	r3, #8
 800273a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <pvPortMalloc+0x6e>
	__asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	617b      	str	r3, [r7, #20]
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	e7fd      	b.n	800275a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d06f      	beq.n	8002844 <pvPortMalloc+0x154>
 8002764:	4b45      	ldr	r3, [pc, #276]	@ (800287c <pvPortMalloc+0x18c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	d86a      	bhi.n	8002844 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800276e:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <pvPortMalloc+0x190>)
 8002770:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002772:	4b43      	ldr	r3, [pc, #268]	@ (8002880 <pvPortMalloc+0x190>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002778:	e004      	b.n	8002784 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d903      	bls.n	8002796 <pvPortMalloc+0xa6>
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f1      	bne.n	800277a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002796:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <pvPortMalloc+0x184>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279c:	429a      	cmp	r2, r3
 800279e:	d051      	beq.n	8002844 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2208      	movs	r2, #8
 80027a6:	4413      	add	r3, r2
 80027a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	2308      	movs	r3, #8
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	429a      	cmp	r2, r3
 80027c0:	d920      	bls.n	8002804 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80027c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <pvPortMalloc+0xfc>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	613b      	str	r3, [r7, #16]
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80027fe:	69b8      	ldr	r0, [r7, #24]
 8002800:	f000 f90a 	bl	8002a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002804:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <pvPortMalloc+0x18c>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <pvPortMalloc+0x18c>)
 8002810:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002812:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <pvPortMalloc+0x18c>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <pvPortMalloc+0x194>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d203      	bcs.n	8002826 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800281e:	4b17      	ldr	r3, [pc, #92]	@ (800287c <pvPortMalloc+0x18c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a18      	ldr	r2, [pc, #96]	@ (8002884 <pvPortMalloc+0x194>)
 8002824:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <pvPortMalloc+0x188>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	431a      	orrs	r2, r3
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800283a:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <pvPortMalloc+0x198>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <pvPortMalloc+0x198>)
 8002842:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002844:	f7ff fa96 	bl	8001d74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <pvPortMalloc+0x17a>
	__asm volatile
 8002852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	60fb      	str	r3, [r7, #12]
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	e7fd      	b.n	8002866 <pvPortMalloc+0x176>
	return pvReturn;
 800286a:	69fb      	ldr	r3, [r7, #28]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3728      	adds	r7, #40	@ 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20001014 	.word	0x20001014
 8002878:	20001028 	.word	0x20001028
 800287c:	20001018 	.word	0x20001018
 8002880:	2000100c 	.word	0x2000100c
 8002884:	2000101c 	.word	0x2000101c
 8002888:	20001020 	.word	0x20001020

0800288c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d04f      	beq.n	800293e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800289e:	2308      	movs	r3, #8
 80028a0:	425b      	negs	r3, r3
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4b25      	ldr	r3, [pc, #148]	@ (8002948 <vPortFree+0xbc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10b      	bne.n	80028d2 <vPortFree+0x46>
	__asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	60fb      	str	r3, [r7, #12]
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	e7fd      	b.n	80028ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <vPortFree+0x66>
	__asm volatile
 80028da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	60bb      	str	r3, [r7, #8]
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	e7fd      	b.n	80028ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <vPortFree+0xbc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01e      	beq.n	800293e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d11a      	bne.n	800293e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <vPortFree+0xbc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002918:	f7ff fa1e 	bl	8001d58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <vPortFree+0xc0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4413      	add	r3, r2
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <vPortFree+0xc0>)
 8002928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800292a:	6938      	ldr	r0, [r7, #16]
 800292c:	f000 f874 	bl	8002a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002930:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <vPortFree+0xc4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <vPortFree+0xc4>)
 8002938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800293a:	f7ff fa1b 	bl	8001d74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20001028 	.word	0x20001028
 800294c:	20001018 	.word	0x20001018
 8002950:	20001024 	.word	0x20001024

08002954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800295a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800295e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002960:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <prvHeapInit+0xac>)
 8002962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3307      	adds	r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0307 	bic.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <prvHeapInit+0xac>)
 8002984:	4413      	add	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800298c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <prvHeapInit+0xb0>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002992:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <prvHeapInit+0xb0>)
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80029a0:	2208      	movs	r2, #8
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0307 	bic.w	r3, r3, #7
 80029ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a15      	ldr	r2, [pc, #84]	@ (8002a08 <prvHeapInit+0xb4>)
 80029b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80029b6:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <prvHeapInit+0xb4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80029be:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <prvHeapInit+0xb4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <prvHeapInit+0xb4>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <prvHeapInit+0xb8>)
 80029e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <prvHeapInit+0xbc>)
 80029ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80029ec:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <prvHeapInit+0xc0>)
 80029ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	2000040c 	.word	0x2000040c
 8002a04:	2000100c 	.word	0x2000100c
 8002a08:	20001014 	.word	0x20001014
 8002a0c:	2000101c 	.word	0x2000101c
 8002a10:	20001018 	.word	0x20001018
 8002a14:	20001028 	.word	0x20001028

08002a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a20:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <prvInsertBlockIntoFreeList+0xa8>)
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e002      	b.n	8002a2c <prvInsertBlockIntoFreeList+0x14>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d8f7      	bhi.n	8002a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4413      	add	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d108      	bne.n	8002a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	441a      	add	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	441a      	add	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d118      	bne.n	8002aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <prvInsertBlockIntoFreeList+0xac>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d00d      	beq.n	8002a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e008      	b.n	8002aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <prvInsertBlockIntoFreeList+0xac>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e003      	b.n	8002aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d002      	beq.n	8002ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	2000100c 	.word	0x2000100c
 8002ac4:	20001014 	.word	0x20001014

08002ac8 <memset>:
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4402      	add	r2, r0
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <memset+0xa>
 8002ad0:	4770      	bx	lr
 8002ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad6:	e7f9      	b.n	8002acc <memset+0x4>

08002ad8 <__libc_init_array>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	2600      	movs	r6, #0
 8002adc:	4d0c      	ldr	r5, [pc, #48]	@ (8002b10 <__libc_init_array+0x38>)
 8002ade:	4c0d      	ldr	r4, [pc, #52]	@ (8002b14 <__libc_init_array+0x3c>)
 8002ae0:	1b64      	subs	r4, r4, r5
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	42a6      	cmp	r6, r4
 8002ae6:	d109      	bne.n	8002afc <__libc_init_array+0x24>
 8002ae8:	f000 f81a 	bl	8002b20 <_init>
 8002aec:	2600      	movs	r6, #0
 8002aee:	4d0a      	ldr	r5, [pc, #40]	@ (8002b18 <__libc_init_array+0x40>)
 8002af0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b1c <__libc_init_array+0x44>)
 8002af2:	1b64      	subs	r4, r4, r5
 8002af4:	10a4      	asrs	r4, r4, #2
 8002af6:	42a6      	cmp	r6, r4
 8002af8:	d105      	bne.n	8002b06 <__libc_init_array+0x2e>
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b00:	4798      	blx	r3
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7ee      	b.n	8002ae4 <__libc_init_array+0xc>
 8002b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0a:	4798      	blx	r3
 8002b0c:	3601      	adds	r6, #1
 8002b0e:	e7f2      	b.n	8002af6 <__libc_init_array+0x1e>
 8002b10:	08002be4 	.word	0x08002be4
 8002b14:	08002be4 	.word	0x08002be4
 8002b18:	08002be4 	.word	0x08002be4
 8002b1c:	08002be8 	.word	0x08002be8

08002b20 <_init>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	bf00      	nop
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr

08002b2c <_fini>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	bf00      	nop
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr
